// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: position_attributes.proto

package position_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosAttrServiceClient is the client API for PosAttrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosAttrServiceClient interface {
	Create(ctx context.Context, in *CreatePosAttrRequest, opts ...grpc.CallOption) (*PosAttr, error)
	GetAll(ctx context.Context, in *GetAllPosAttrRequest, opts ...grpc.CallOption) (*GetAllPosAttrResponse, error)
	GetById(ctx context.Context, in *GetByIdPosAttrRequest, opts ...grpc.CallOption) (*GetByIdPosAttrResponse, error)
	Update(ctx context.Context, in *UpdatePosAttrRequest, opts ...grpc.CallOption) (*UpdatePosAttrResponse, error)
	Delete(ctx context.Context, in *DeletePosAttrRequest, opts ...grpc.CallOption) (*DeletePosAttrResponse, error)
}

type posAttrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosAttrServiceClient(cc grpc.ClientConnInterface) PosAttrServiceClient {
	return &posAttrServiceClient{cc}
}

func (c *posAttrServiceClient) Create(ctx context.Context, in *CreatePosAttrRequest, opts ...grpc.CallOption) (*PosAttr, error) {
	out := new(PosAttr)
	err := c.cc.Invoke(ctx, "/position_service.PosAttrService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posAttrServiceClient) GetAll(ctx context.Context, in *GetAllPosAttrRequest, opts ...grpc.CallOption) (*GetAllPosAttrResponse, error) {
	out := new(GetAllPosAttrResponse)
	err := c.cc.Invoke(ctx, "/position_service.PosAttrService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posAttrServiceClient) GetById(ctx context.Context, in *GetByIdPosAttrRequest, opts ...grpc.CallOption) (*GetByIdPosAttrResponse, error) {
	out := new(GetByIdPosAttrResponse)
	err := c.cc.Invoke(ctx, "/position_service.PosAttrService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posAttrServiceClient) Update(ctx context.Context, in *UpdatePosAttrRequest, opts ...grpc.CallOption) (*UpdatePosAttrResponse, error) {
	out := new(UpdatePosAttrResponse)
	err := c.cc.Invoke(ctx, "/position_service.PosAttrService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posAttrServiceClient) Delete(ctx context.Context, in *DeletePosAttrRequest, opts ...grpc.CallOption) (*DeletePosAttrResponse, error) {
	out := new(DeletePosAttrResponse)
	err := c.cc.Invoke(ctx, "/position_service.PosAttrService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosAttrServiceServer is the server API for PosAttrService service.
// All implementations must embed UnimplementedPosAttrServiceServer
// for forward compatibility
type PosAttrServiceServer interface {
	Create(context.Context, *CreatePosAttrRequest) (*PosAttr, error)
	GetAll(context.Context, *GetAllPosAttrRequest) (*GetAllPosAttrResponse, error)
	GetById(context.Context, *GetByIdPosAttrRequest) (*GetByIdPosAttrResponse, error)
	Update(context.Context, *UpdatePosAttrRequest) (*UpdatePosAttrResponse, error)
	Delete(context.Context, *DeletePosAttrRequest) (*DeletePosAttrResponse, error)
	mustEmbedUnimplementedPosAttrServiceServer()
}

// UnimplementedPosAttrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosAttrServiceServer struct {
}

func (UnimplementedPosAttrServiceServer) Create(context.Context, *CreatePosAttrRequest) (*PosAttr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPosAttrServiceServer) GetAll(context.Context, *GetAllPosAttrRequest) (*GetAllPosAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPosAttrServiceServer) GetById(context.Context, *GetByIdPosAttrRequest) (*GetByIdPosAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPosAttrServiceServer) Update(context.Context, *UpdatePosAttrRequest) (*UpdatePosAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPosAttrServiceServer) Delete(context.Context, *DeletePosAttrRequest) (*DeletePosAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPosAttrServiceServer) mustEmbedUnimplementedPosAttrServiceServer() {}

// UnsafePosAttrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosAttrServiceServer will
// result in compilation errors.
type UnsafePosAttrServiceServer interface {
	mustEmbedUnimplementedPosAttrServiceServer()
}

func RegisterPosAttrServiceServer(s grpc.ServiceRegistrar, srv PosAttrServiceServer) {
	s.RegisterService(&PosAttrService_ServiceDesc, srv)
}

func _PosAttrService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosAttrServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position_service.PosAttrService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosAttrServiceServer).Create(ctx, req.(*CreatePosAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosAttrService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPosAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosAttrServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position_service.PosAttrService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosAttrServiceServer).GetAll(ctx, req.(*GetAllPosAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosAttrService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdPosAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosAttrServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position_service.PosAttrService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosAttrServiceServer).GetById(ctx, req.(*GetByIdPosAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosAttrService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosAttrServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position_service.PosAttrService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosAttrServiceServer).Update(ctx, req.(*UpdatePosAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosAttrService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosAttrServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/position_service.PosAttrService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosAttrServiceServer).Delete(ctx, req.(*DeletePosAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosAttrService_ServiceDesc is the grpc.ServiceDesc for PosAttrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosAttrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "position_service.PosAttrService",
	HandlerType: (*PosAttrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PosAttrService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _PosAttrService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PosAttrService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PosAttrService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PosAttrService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "position_attributes.proto",
}
